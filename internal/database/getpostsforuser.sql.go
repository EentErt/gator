// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: getpostsforuser.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPostsForUser = `-- name: GetPostsForUser :many
WITH get_feed_id (feed_id) AS (
    SELECT feed_id
    FROM feed_follow
    WHERE user_id = $1
)
SELECT id, created_at, updated_at, title, url, description, published_at, posts.feed_id, get_feed_id.feed_id
FROM posts
INNER JOIN get_feed_id
ON posts.feed_id = get_feed_id.feed_id
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.NullUUID
	Limit  int32
}

type GetPostsForUserRow struct {
	ID          int32
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      int32
	FeedID_2    sql.NullInt32
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
