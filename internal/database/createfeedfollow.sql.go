// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: createfeedfollow.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follow(created_at, updated_at, user_id, feed_id) 
    VALUES($1, $2, $3, $4)
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id, users.name AS user_name, feed.name AS feed_name
FROM inserted_feed_follow
INNER JOIN users ON inserted_feed_follow.user_id = users.id
INNER JOIN feed ON inserted_feed_follow.feed_id = feed.id
`

type CreateFeedFollowParams struct {
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    sql.NullInt32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    sql.NullInt32
	UserName  string
	FeedName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}
